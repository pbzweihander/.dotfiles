# vim: sw=2

# rulers
add-highlighter global/ number-lines -hlcursor -separator " " -min-digits 3

set-option -add global ui_options terminal_assistant=none
set-option global scrolloff 3,5
set-option global tabstop 4

# Plugins
evaluate-commands %sh{
  plugins="$kak_config/plugins"
  mkdir -p "$plugins"
  [ ! -e "$plugins/plug.kak" ] && \
    git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
  printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload
plug "pbzweihander/kakoune-snazzy" theme config %{
  colorscheme snazzy
}
plug "andreyorst/fzf.kak" config %{
  map global normal <c-p> ': fzf-mode<ret>'
} defer fzf-file %{
  set-option global fzf_file_command 'fd -LH -t f -E /.git'
  set-option global fzf_highlight_command 'bat'
} defer fzf-grep %{
  set-option global fzf_grep_command 'rg'
}
plug "kak-lsp/kak-lsp" do %{
  cargo install --locked --force --path .
} config %{
  map global user . ': lsp-hover<ret>' -docstring 'lsp hover'
  map global user ] ': lsp-find-error --include-warnings<ret>' -docstring 'lsp find next error or warning'
  map global user [ ': lsp-find-error --previous --include-warnings<ret>' -docstring 'lsp find previous error or warning'
  map global user a ': lsp-code-actions<ret>' -docstring 'lsp code actions'
  map global user F ': lsp-formatting<ret>' -docstring 'lsp formatting'
  map global user d ': lsp-diagnostics<ret>' -docstring 'show lsp diagnostics'
  map global user <space> ': enter-user-mode lsp<ret>' -docstring 'enter lsp mode'
  map global normal <F2> ': lsp-rename-prompt<ret>' -docstring 'lsp rename'
  map global insert <F2> '<esc>: lsp-rename-prompt<ret>' -docstring 'lsp rename'

  hook global WinSetOption filetype=(rust|python|go|javascript|typescript|sql|terraform) %{
    set-option -add global lsp_cmd " -c %val{config}/kak-lsp.toml --log /tmp/kak-lsp.log"
    set-option global lsp_hover_anchor true
    set-option global lsp_auto_highlight_references true
    lsp-auto-signature-help-enable
    lsp-stop-on-exit-enable
    lsp-enable-window
    require-module kak_lsp_theme_snazzy
  }
  hook global WinSetOption filetype=python %{
    set-option -add global lsp_server_configuration \
      "python.pythonPath='%sh{pyenv which python}'" \
      python.analysis.autoImportCompletions=false \
      python.analysis.useLibraryCodeForTypes=true
    lsp-did-change-config
  }
}
plug "andreyorst/powerline.kak" defer powerline %{
  powerline-format global 'line_column position filetype git lsp bufname mode_info'

  hook global WinSetOption filetype=.* %{
    powerline-separator none
  }
} defer powerline_snazzy %{
  powerline-theme snazzy
} config %{
  powerline-start
}
plug "andreyorst/smarttab.kak" defer smarttab %{
  set-option global softtabstop 4
} config %{
  hook global WinSetOption filetype=.* expandtab
}
plug "https://gitlab.com/Screwtapello/kakoune-state-save" config %{
  hook global KakBegin .* %{
      state-save-reg-load colon
      state-save-reg-load pipe
      state-save-reg-load slash
  }
  hook global KakEnd .* %{
      state-save-reg-save colon
      state-save-reg-save pipe
      state-save-reg-save slash
  }
}
plug "TeddyDD/kakoune-edit-or-dir" config %{
  unalias global e edit
  alias global e edit-or-dir
}
plug "occivink/kakoune-filetree"
plug "dgmulf/local-kakrc" config %{
  set-option global source_local_kakrc true
}
# Disable mouse
set-option -add global ui_options terminal_enable_mouse=false

# Is it wayland now?
declare-option bool is_wayland %sh{
  if test -n "$WAYLAND_DISPLAY"; then
    echo 'true'
  else
    echo 'false'
  fi
}

# `user y`, `user p`, `user P` for system clipboard
declare-option str system_clipboard_copy_cmd %sh{
  if [ "$kak_opt_is_wayland" = 'true' ]; then
    printf 'wl-copy'
  else
    printf 'xclip -i -selection clipboard'
  fi
}
declare-option str system_clipboard_paste_cmd %sh{
  if [ "$kak_opt_is_wayland" = 'true' ]; then
    printf 'wl-paste -n -t text'
  else
    printf 'xclip -o -selection clipboard'
  fi
}
map global user y "<a-|> %opt{system_clipboard_copy_cmd}<ret>" -docstring 'copy to system clipboard'
map global user p "<a-!> %opt{system_clipboard_paste_cmd}<ret>" -docstring 'paste before from system clipboard'
map global user P "! %opt{system_clipboard_paste_cmd}<ret>" -docstring 'paste before from system clipboard'
map global user R "! %opt{system_clipboard_paste_cmd}<ret>""_d" -docstring 'paste before from system clipboard'

# `user c` to comment line
map global user c ':comment-line<ret>' -docstring 'comment line'

# Use tab for completion
hook global InsertCompletionShow .* %{
  try %{
    execute-keys -draft 'h<a-K>\h<ret>'
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
  }
}
hook global InsertCompletionHide .* %{
  unmap window insert <tab> <c-n>
  unmap window insert <s-tab> <c-p>
}

# Load editorconfig and modeline when buffer is created
hook global BufCreate .* %{
  try editorconfig-load
  try modeline-parse
}

# Show whitespaces
set-face global Whitespace rgb:3a3d4d,default
add-highlighter global/ show-whitespaces
# Trailing whitespace
add-highlighter global/trailing-whitespace regex '\h+$' 0:default,rgb:ff5c57

# Try ; first, then <space>
define-command combined-space -docstring 'try ; first, then <space>.' %{
  execute-keys %sh{
    leftover=$(printf '%s' "$kak_selections_desc" | sed -E 's/([0-9.]+),\1 *//g')
  if [ -z "$leftover" ]; then
    printf '<space>'
  else
    printf ';'
  fi
  }
}
map global normal <space> ': combined-space<ret>' -docstring 'reduce selections to their cursor'

# Change cursor color when focus in/out
hook global FocusIn .* %{
  unset-face window PrimaryCursor
  unset-face window PrimaryCursorEol
}
hook global FocusOut .* %{
  set-face window PrimaryCursor white,black+F
  set-face window PrimaryCursorEol white,black+F
}

# whichwrap
hook global NormalKey h %{
    try %{
        execute-keys <a-k>$<ret> l
    }
}
hook global NormalKey l %{
    try %{
        execute-keys <a-k>^<ret>h
    }
}

# Typos
alias global W write
alias global Q quit

# Split
map global normal <a-ret> ': new<ret>' -docstring 'split a new window'

# quit all
alias global qa kill
alias global Qa kill
alias global qa! kill!
alias global Qa! kill!

# gitgutter
hook global WinCreate .* %{
  try 'git show-diff'
}
hook global BufWritePost .* %{
  try 'git show-diff'
}

# easy save
map global normal <c-s> ': w<ret>'
map global insert <c-s> '<a-;>: w<ret>'

# formatting
map global user f ': format-buffer<ret>' -docstring 'formatting'

# easy config
define-command kakconfig  -docstring 'open kakrc' %{
  edit "%val{config}/kakrc"
}

# easy git
alias global g git

# uuid
define-command uuid -docstring 'generate uuid v4' %{
  execute-keys '<a-!> /usr/bin/python -c "import uuid; print(uuid.uuid4(), end='''')"<ret>'
}

# sql formatter
declare-option -docstring 'formatcmd for sql' str sql_formatcmd 'pg_format -L -w 80 -B'
define-command format-sql -docstring 'format sql' %{
  execute-keys "| %opt{sql_formatcmd}<ret>"
}

# sort
define-command sort -docstring 'sort selected lines' -params .. %{
  execute-keys "| LC_ALL=C sort %arg{@}<ret>"
}

# filetype specifics
hook global WinSetOption filetype=(kak|json|yaml|sql|terraform) %{
  set-option window indentwidth 2
}
hook global WinSetOption filetype=sql %{
  set-option window formatcmd %opt{sql_formatcmd}
  set-option window lsp_auto_highlight_references false
}
hook global WinSetOption filetype=python %{
  set-option window lintcmd "~/.local/bin/flake8 --filename='*' --format='%%(path)s:%%(row)d:%%(col)d: error: %%(text)s'"
  set-option window formatcmd '~/.local/bin/black -q -'
  hook global BufWritePost .* %{
    lint-buffer
  }
}
hook global WinSetOption filetype=terraform %{
  set-option window formatcmd 'terraform fmt -'
  set-option window lsp_auto_highlight_references false
  lsp-auto-signature-help-disable
}
hook global WinSetOption filetype=rust %{
  set-option buffer formatcmd 'rustfmt +stable --edition 2018'
}
hook global WinSetOption filetype=go %{
  noexpandtab
  set-option window formatcmd 'gofmt'
  # add-highlighter window/ wrap -indent -word -marker >
}
hook global WinSetOption filetype=typescript %{
  set-option window indentwidth 2
  set-option window formatcmd "npx prettier --stdin-filepath %val{bufname}"
}
hook global WinSetOption filetype=rust %{
  hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
  hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
  hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
  hook -once -always window WinSetOption filetype=.* %{
    remove-hooks window semantic-tokens
  }
}
